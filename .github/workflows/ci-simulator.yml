name: CI Simulator Integration

on:
  push:
    branches: [ main, ai-integration-main ]
  pull_request:
    branches: [ main, ai-integration-main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  ci-simulation:
    name: CI Simulation
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Qt)
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xinput0 libxcb-xfixes0
        sudo apt-get install -y libgl1-mesa-glx libegl1-mesa libxrandr2 libxss1 libxcursor1 libxcomposite1 libasound2 libxi6 libxtst6

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[ci]

    - name: Run CI Simulation
      env:
        QT_QPA_PLATFORM: offscreen
        DISPLAY: ':99'
      run: |
        xvfb-run -a python -m tools.ci.simulator run --checks all --format both --python-versions ${{ matrix.python-version }}

    - name: Upload CI Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ci-reports-${{ matrix.python-version }}
        path: |
          reports/ci-simulation/
          logs/

    - name: Check CI Results
      run: |
        if [ -f "reports/ci-simulation/latest/results.json" ]; then
          python -c "
          import json
          with open('reports/ci-simulation/latest/results.json') as f:
              data = json.load(f)
          print(f'Overall Status: {data.get("overall_status", "unknown")}')
          print(f'Summary: {data.get("summary", "No summary available")}')
          if data.get('overall_status') == 'FAILURE':
              exit(1)
          "
        fi

  deployment-check:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: ci-simulation
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[ci]

    - name: Run deployment readiness check
      run: |
        python tools/create_deployment_package.py --skip-tests

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: dist/
