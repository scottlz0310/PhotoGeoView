name: AI統合 CI/CD パイプライン

on:
  push:
    branches: [ main, ai-integration-main ]
  pull_request:
    branches: [ main, ai-integration-main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  # AI統合テスト
  ai-integration-tests:
    name: AI統合テスト
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4

    - name: Python ${{ matrix.python-version }} をセットアップ
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 依存関係をキャッシュ
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 依存関係をインストール
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist flake8 mypy black isort

    - name: コード品質チェック (Black)
      run: |
        black --check --diff src/ tests/

    - name: インポート順序チェック (isort)
      run: |
        isort --check-only --diff src/ tests/

    - name: コードスタイルチェック (flake8)
      run: |
        flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503

    - name: 型チェック (mypy)
      run: |
        mypy src/ --ignore-missing-imports --no-strict-optional

    - name: AI統合テストを実行
      run: |
        pytest tests/integration_tests/ -v --cov=src --cov-report=xml --cov-report=html

    - name: パフォーマンステストを実行
      run: |
        pytest tests/performance_tests/ -v --tb=short

    - name: AI互換性テストを実行
      run: |
        pytest tests/ai_compatibility/ -v --tb=short

    - name: カバレッジレポートをアップロード
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # AI コンポーネント別テスト
  ai-component-tests:
    name: AI コンポーネント別テスト
    runs-on: ubuntu-latest

    strategy:
      matrix:
        ai-component: ['copilot', 'cursor', 'kiro']

    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4

    - name: Python をセットアップ
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 依存関係をインストール
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: ${{ matrix.ai-component }} コンポーネントテストを実行
      run: |
        pytest tests/${{ matrix.ai-component }}_tests/ -v --cov=src --cov-report=xml

    - name: ${{ matrix.ai-component }} パフォーマンステストを実行
      run: |
        python tests/performance_benchmarks.py --component=${{ matrix.ai-component }}

  # ドキュメント生成テスト
  documentation-tests:
    name: ドキュメント生成テスト
    runs-on: ubuntu-latest

    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4

    - name: Python をセットアップ
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 依存関係をインストール
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: ドキュメント生成テスト
      run: |
        python docs/ai_integration/standalone_doc_generator.py

    - name: 生成されたドキュメントを確認
      run: |
        test -f docs/ai_integration/api_documentation.md
        test -f docs/ai_integration/ai_contribution_report.md
        test -f docs/ai_integration/troubleshooting_guide.md

    - name: ドキュメント品質チェック
      run: |
        python -c "
        import os
        docs_dir = 'docs/ai_integration'
        for file in os.listdir(docs_dir):
            if file.endswith('.md'):
                with open(os.path.join(docs_dir, file), 'r', encoding='utf-8') as f:
                    content = f.read()
                    assert len(content) > 100, f'{file} is too short'
                    assert 'AI' in content, f'{file} missing AI content'
        print('✓ All documentation files passed quality checks')
        "

  # セキュリティスキャン
  security-scan:
    name: セキュリティスキャン
    runs-on: ubuntu-latest

    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4

    - name: Python をセットアップ
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 依存関係をインストール
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: 依存関係の脆弱性スキャン
      run: |
        safety check --json || true

    - name: コードセキュリティスキャン
      run: |
        bandit -r src/ -f json || true

  # パフォーマンス回帰テスト
  performance-regression:
    name: パフォーマンス回帰テスト
    runs-on: ubuntu-latest

    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4

    - name: Python をセットアップ
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 依存関係をインストール
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark

    - name: パフォーマンスベンチマークを実行
      run: |
        pytest tests/performance_tests/ --benchmark-only --benchmark-json=benchmark.json

    - name: ベンチマーク結果を保存
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.json

  # デプロイメント準備
  deployment-preparation:
    name: デプロイメント準備
    runs-on: ubuntu-latest
    needs: [ai-integration-tests, ai-component-tests, documentation-tests]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4

    - name: Python をセットアップ
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 依存関係をインストール
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build

    - name: パッケージをビルド
      run: |
        python -m build

    - name: ビルド成果物をアップロード
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/

  # 統合レポート生成
  integration-report:
    name: 統合レポート生成
    runs-on: ubuntu-latest
    needs: [ai-integration-tests, ai-component-tests, documentation-tests, security-scan, performance-regression]
    if: always()

    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4

    - name: Python をセットアップ
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 依存関係をインストール
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 統合レポートを生成
      run: |
        python tools/generate_integration_report.py

    - name: レポートをアップロード
      uses: actions/upload-artifact@v3
      with:
        name: integration-report
        path: reports/
