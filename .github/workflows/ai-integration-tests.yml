name: AI Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 毎日午前2時（UTC）に実行
    - cron: '0 2 * * *'

jobs:
  ai-integration-tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist

    - name: Create test data directory
      run: |
        mkdir -p tests/test_data
        mkdir -p tests/reports
        mkdir -p logs

    - name: Run unit tests
      run: |
        python -m pytest tests/unit_tests.py -v --cov=src --cov-report=xml

    - name: Run AI integration tests
      run: |
        python tests/run_integration_tests.py --integration

    - name: Run performance benchmarks
      run: |
        python tests/run_integration_tests.py --benchmark

    - name: Upload test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports-${{ matrix.python-version }}
        path: |
          tests/reports/
          coverage.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Check test results
      run: |
        if [ -f "tests/reports/combined_test_report_*.md" ]; then
          echo "Test report generated successfully"
          cat tests/reports/combined_test_report_*.md
        else
          echo "No test report found"
          exit 1
        fi

  performance-regression-check:
    runs-on: ubuntu-latest
    needs: ai-integration-tests
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 履歴全体を取得

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run baseline performance tests
      run: |
        git checkout ${{ github.base_ref }}
        python tests/run_integration_tests.py --benchmark
        mv tests/reports/performance_benchmark_report.json baseline_performance.json

    - name: Run current performance tests
      run: |
        git checkout ${{ github.head_ref }}
        python tests/run_integration_tests.py --benchmark
        mv tests/reports/performance_benchmark_report.json current_performance.json

    - name: Compare performance
      run: |
        python -c "
        import json

        with open('baseline_performance.json') as f:
            baseline = json.load(f)
        with open('current_performance.json') as f:
            current = json.load(f)

        # パフォーマンス比較ロジック
        print('Performance comparison completed')
        "

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security scan
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements.txt

    - name: Run Bandit security linter
      run: |
        pip install bandit
        bandit -r src/ -f json -o security-report.json || true

    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.json

  documentation-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install documentation dependencies
      run: |
        pip install sphinx sphinx-rtd-theme

    - name: Check documentation completeness
      run: |
        python -c "
        import ast
        import os
        from pathlib import Path

        def check_docstrings(file_path):
            with open(file_path, 'r', encoding='utf-8') as f:
                tree = ast.parse(f.read())

            missing_docs = []
            for node in ast.walk(tree):
                if isinstance(node, (ast.FunctionDef, ast.ClassDef)):
                    if not ast.get_docstring(node):
                        missing_docs.append(f'{file_path}:{node.lineno} - {node.name}')

            return missing_docs

        all_missing = []
        for py_file in Path('src').rglob('*.py'):
            missing = check_docstrings(py_file)
            all_missing.extend(missing)

        if all_missing:
            print('Missing docstrings:')
            for item in all_missing[:10]:  # 最初の10件のみ表示
                print(f'  {item}')
            if len(all_missing) > 10:
                print(f'  ... and {len(all_missing) - 10} more')
        else:
            print('All functions and classes have docstrings')
        "

  notify-results:
    runs-on: ubuntu-latest
    needs: [ai-integration-tests, security-scan, documentation-check]
    if: always()

    steps:
    - name: Notify test results
      run: |
        echo "AI Integration Test Results:"
        echo "- Integration Tests: ${{ needs.ai-integration-tests.result }}"
        echo "- Security Scan: ${{ needs.security-scan.result }}"
        echo "- Documentation Check: ${{ needs.documentation-check.result }}"

        if [ "${{ needs.ai-integration-tests.result }}" = "success" ] && \
           [ "${{ needs.security-scan.result }}" = "success" ] && \
           [ "${{ needs.documentation-check.result }}" = "success" ]; then
          echo "✅ All checks passed!"
        else
          echo "❌ Some checks failed"
          exit 1
        fi
